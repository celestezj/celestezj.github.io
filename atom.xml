<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Muggledy&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-02T05:24:43.533Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>muggledy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多项式曲线拟合</title>
    <link href="http://example.com/2021/02/02/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88/"/>
    <id>http://example.com/2021/02/02/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88/</id>
    <published>2021-02-01T16:12:44.496Z</published>
    <updated>2021-02-02T05:24:43.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>设多项式函数$f(x)=a_0+a_1x+a_2x^2+…+a_kx^k$，有$n$个数据点$(x_0,y_0),(x_1,y_1),…,(x_{n-1},y_{n-1})$，使用最小二乘法进行函数拟合，得到误差$e=\sum\limits_{i=0}^{n-1}[f(x_i)-y_i]^2=\sum\limits_{i=0}^{n-1}[(a_0+a_1x_i+a_2x_i^2+…+a_kx_i^k)-y_i]^2$</p><p>求对$a_0,a_1,…,a_k$的偏导数，并令其为0，此时误差最小：</p><p>$\frac{\partial e}{\partial a_0}=2\sum\limits_{i=0}^{n-1}[(a_0+a_1x_i+a_2x_i^2+…+a_kx_i^k)-y_i]1=0$</p><p>$\frac{\partial e}{\partial a_1}=2\sum\limits_{i=0}^{n-1}[(a_0+a_1x_i+a_2x_i^2+…+a_kx_i^k)-y_i]x_i=0$</p><p>$\frac{\partial e}{\partial a_2}=2\sum\limits_{i=0}^{n-1}[(a_0+a_1x_i+a_2x_i^2+…+a_kx_i^k)-y_i]x_i^2=0$</p><p>$\dots$</p><p>$\frac{\partial e}{\partial a_k}=2\sum\limits_{i=0}^{n-1}[(a_0+a_1x_i+a_2x_i^2+…+a_kx_i^k)-y_i]x_i^k=0$</p><p>各式展开得到：</p><p>$\sum\limits_{i=0}^{n-1}a_0x_i^0+\sum\limits_{i=0}^{n-1}a_1x_i^1+…+\sum\limits_{i=0}^{n-1}a_kx_i^k=\sum\limits_{i=0}^{n-1}y_ix_i^0$</p><p>$\sum\limits_{i=0}^{n-1}a_0x_i^1+\sum\limits_{i=0}^{n-1}a_1x_i^2+…+\sum\limits_{i=0}^{n-1}a_kx_i^{k+1}=\sum\limits_{i=0}^{n-1}y_ix_i^1$</p><p>$\sum\limits_{i=0}^{n-1}a_0x_i^2+\sum\limits_{i=0}^{n-1}a_1x_i^3+…+\sum\limits_{i=0}^{n-1}a_kx_i^{k+2}=\sum\limits_{i=0}^{n-1}y_ix_i^2$</p><p>$\dots$</p><p>$\sum\limits_{i=0}^{n-1}a_0x_i^k+\sum\limits_{i=0}^{n-1}a_1x_i^{k+1}+…+\sum\limits_{i=0}^{n-1}a_kx_i^{k+k}=\sum\limits_{i=0}^{n-1}y_ix_i^k$</p><p>写成矩阵相乘的形式：</p><p>$\begin{bmatrix}\sum\limits_{i=0}^{n-1}x_i^0 &amp; \sum\limits_{i=0}^{n-1}x_i^1 &amp; \cdots &amp; \sum\limits_{i=0}^{n-1}x_i^k \\ \sum\limits_{i=0}^{n-1}x_i^1 &amp; \sum\limits_{i=0}^{n-1}x_i^2 &amp; \cdots &amp; \sum\limits_{i=0}^{n-1}x_i^{k+1} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ \sum\limits_{i=0}^{n-1}x_i^k &amp; \sum\limits_{i=0}^{n-1}x_i^{k+1} &amp; \cdots &amp; \sum\limits_{i=0}^{n-1}x_i^{k+k}\end{bmatrix}\times\begin{bmatrix}a_0 \\ a_1 \\ \vdots \\ a_k\end{bmatrix}=\begin{bmatrix}\sum\limits_{i=0}^{n-1}y_ix_i^0 \\ \sum\limits_{i=0}^{n-1}y_ix_i^1 \\ \vdots \\ \sum\limits_{i=0}^{n-1}y_ix_i^k\end{bmatrix}$</p><p>解此非齐次方程组即可得到$a_0,a_1,…,a_k$的值</p><p>显然上式矩阵中每一项都可以表示为向量内积，最终分解为：$X^TXA=X^TY$，其中$X=\begin{bmatrix}x_0^0 &amp; x_0^1 &amp; x_0^2 &amp; \cdots &amp; x_0^k \\ x_1^0 &amp; x_1^1 &amp; x_1^2 &amp; \cdots &amp; x_1^k \\ \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ x_{n-1}^0 &amp; x_{n-1}^1 &amp; x_{n-1}^2 &amp; \cdots &amp; x_{n-1}^k\end{bmatrix}$，$Y=\begin{bmatrix}y_0 \\ y_1 \\ \vdots \\ y_{n-1}\end{bmatrix}$，$A=\begin{bmatrix}a_0 \\ a_1 \\ \vdots \\ a_k\end{bmatrix}$</p><p>所以$A=(X^TX)^{-1}X^TY$</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit_poly</span>(<span class="params">x,y,k=<span class="number">2</span></span>):</span></span><br><span class="line">    n=<span class="built_in">len</span>(x)</span><br><span class="line">    <span class="keyword">if</span> n!=<span class="built_in">len</span>(y):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;x&#x27;s length must be equal to y&#x27;s length!&quot;</span>)</span><br><span class="line">    X=np.zeros((n,k+<span class="number">1</span>))</span><br><span class="line">    X[:,<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">    X[:,<span class="number">1</span>]=np.array(x)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,k+<span class="number">1</span>):</span><br><span class="line">        X[:,i]=np.power(x,i)</span><br><span class="line">    Y=np.array(y)[:,<span class="literal">None</span>]</span><br><span class="line">    A=(linalg.inv(X.T.dot(X))).dot(X.T).dot(Y).flatten()</span><br><span class="line">    expr=<span class="string">&#x27;y=&#x27;</span>+<span class="string">&#x27;+&#x27;</span>.join([<span class="string">&#x27;*&#x27;</span>.join([<span class="string">&#x27;(&#x27;</span>+<span class="built_in">str</span>(A[i])+<span class="string">&#x27;)&#x27;</span>]+[<span class="string">&#x27;x&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>)])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">poly</span>(<span class="params">x</span>):</span></span><br><span class="line">        x=np.array(x)</span><br><span class="line">        d=&#123;<span class="string">&#x27;x&#x27;</span>:x&#125;</span><br><span class="line">        exec(expr,<span class="built_in">globals</span>(),d)</span><br><span class="line">        <span class="keyword">return</span> d.get(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> poly,A</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/celestezj/ImageHosting/master/img/20210202104045.PNG" style="zoom:0.45"></p><p>下载<a href="https://raw.githubusercontent.com/celestezj/ImageHosting/master/scripts/fit_poly.py">完整代码</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;设多项式函数$f(x)=a_0+a_1x+a_2x^2+…+a_kx^k$，有$n$个数据点$(x_0,y_0),(x_1,y_1),…,(</summary>
      
    
    
    
    <category term="mathematics" scheme="http://example.com/categories/mathematics/"/>
    
    
    <category term="fit theory" scheme="http://example.com/tags/fit-theory/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客配置</title>
    <link href="http://example.com/2021/02/01/%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/02/01/%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-02-01T12:11:05.528Z</published>
    <updated>2021-02-02T10:49:22.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境初始化"><a href="#环境初始化" class="headerlink" title="环境初始化"></a>环境初始化</h1><p>以<i>Windows</i>环境为例</p><ol><li><p>安装<i>git</i></p></li><li><p>安装<i>nodejs</i>（通过<i>nvm</i>安装）</p><ul><li><p>安装<i>nvm</i></p><p>下载<i><a href="https://github.com/coreybutler/nvm-windows/releases">nvm-noinstall.zip</a></i>并解压，设路径为<i>path/nvm/</i>，以管理员身份运行其中的<i>install.cmd</i>，编辑生成的<i>path/nvm/settings.txt</i>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root: path&#x2F;nvm</span><br><span class="line">path: path&#x2F;nodejs #不存在该目录，但不用管</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure><p>此时系统环境变量会新增两项：<code>NVM_HOME</code>和<code>NVM_SYMLINK</code>，修改<code>NVM_HOME</code>值为<i>path/nvm</i>，<code>NVM_SYMLINK</code>值为<i>path/nodejs</i>，并添加到<code>PATH</code>变量中：<i>%NVM_HOME%;%NVM_SYMLINK%;</i></p><p>打开<i>cmd</i>命令窗口，输入<code>nvm v</code>查看配置是否正确</p></li><li><p>在命令窗口中输入<code>nvm install latest</code>安装最新的<i>nodejs</i>版本（包括局部<i>npm</i>），随后通过<code>nvm use 版本号</code>选择要使用的版本（可以通过<code>nvm ls</code>查看当前安装的所有<i>nodejs</i>版本）</p></li><li><p>安装全局<i>npm</i>（可选）</p><p>首先执行<code>npm config set prefix &quot;/path/nvm/npm&quot;</code>配置<i>npm</i>的全局安装路径，会生成一个<i>.npmrc</i>文件（默认在<i>C</i>盘用户文件夹下），其中的内容就是<i>path/nvm/npm</i>，然后执行<code>npm install npm -g</code>安装全局<i>npm</i>，注意这个<code>-g</code>参数。在系统中新建环境变量<code>NPM_HOME</code>，值为<i>path/nvm/npm</i>，并将<code>%NPM_HOME%</code>添加到<code>PATH</code>变量中（注意要放在<code>%NVM_SYMLINK%</code>前面），执行<code>npm -v</code>查看配置是否正确</p></li><li><p>安装<i>cnpm</i>加速（可选）</p><p>执行<code>npm install -g cnpm --registry=http://r.cnpmjs.org</code>命令安装，之后就可以用<code>cnpm install 包名</code>来代替<code>npm install 包名</code>了</p></li></ul></li><li><p>安装<i>Hexo</i></p><p>执行命令<code>cnpm install -g hexo-cli</code></p></li><li><p>建站</p><ul><li><p>创建个人博客文件夹，设路径为<i>path/myblog/</i>，初始化博客文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/myblog/ #之后的所有命令都要先cd进入博客根目录，不再赘述</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化后得到一个<i>package.json</i>文件（描述了项目所依赖的包），然后再执行<code>cnpm install</code>安装相关依赖</p></li><li><p>生成静态网页，并在本地发布</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>选择某个现成的<a href="https://hexo.io/themes">主题</a>，一般下载后放到博客根目录下的主题文件夹中，即<i>myblog/themes/</i>，<i>Hexo</i>将会根据主题来生成静态页面。本次选用<a href="https://github.com/Molunerfinn/hexo-theme-melody">Melody</a>主题，一步一步根据说明文档进行相关配置，另外稍有不同的是，该主题可以直接通过<code>cnpm install --save hexo-theme-melody</code>命令安装（放在<i>myblog/node_modules/</i>目录下）</p><ul><li><p><i>LaTex</i>支持</p><p>说明文档有所遗漏，具体的，先安装<i>Kramed</i>，且需要卸载掉默认的渲染引擎<i>marked</i>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm uninstall hexo-renderer-marked --save</span><br><span class="line">cnpm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>再修改<i>melody.yml</i>主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure><p>由于<i>LaTeX</i>与<i>markdown</i>语法存在语义冲突，所以还需要对默认的转义规则进行修改，修改<i>myblog/node_modules\kramed\lib\rules\inline.js</i>中的两处内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>, <span class="comment">//替换：escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>, <span class="comment">//替换：em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br></pre></td></tr></table></figure><p>注意，由于<i>node_modules</i>文件夹不会被<i>git</i>跟踪（该项位于<i>.gitignore</i>中），因此在博客迁移后需要重新配置（所以应尽量避免修改<i>node_modules</i>文件夹中的内容以减少麻烦）</p></li><li><p>部署到<i>GitHub Page</i></p><p>在<i>GitHub</i>上新建仓库，命名为：<i>用户名.github.io</i>，再修改<i>_config.yml</i>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:用户名/用户名.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>注意，如果本地添加了多个<i>GitHub</i>账号的密钥，应根据<i>~/.ssh/config</i>文件修改上述<i>repo</i>地址为：<i>Host:用户名/用户名.github.io</i>，最后执行部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d //和上一条命令可以合并为：hexo g -d，如果报错：ERROR Deployer not found: git，先执行：cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>部署成功后，通过地址”<i><a href="https://用户名.github.io/">https://用户名.github.io/</a></i>“即可访问博客</p></li><li><p>博客迁移和同步管理</p><ul><li>在<i>GitHub</i>（<i>用户名.github.io</i>）上新建<i>env</i>分支（用于存放博客环境文件，即本地的<i>myblog/</i>下的主题和配置文件等，而<i>master</i>主分支自然就是存放<i>Hexo</i>生成的静态站点文件，即<i>myblog/public/</i>），此时里面的内容和主分支是一样的，将<i>env</i>分支单独克隆到本地：<code>git clone -b env git@github.com:用户名/用户名.github.io.git</code>，删除除<i>.git</i>外的所有其它文件，然后执行<code>git add -A</code>、<code>git commit -m &quot;提交说明&quot;</code>，最后推送到远程仓库：<code>git push origin env</code>，这时候，远程<i>env</i>分支被清空</li><li>将上一步得到的<i>.git</i>直接拷贝到<i>myblog/</i>根目录下，此时博客文件夹变成和远程<i>env</i>分支关联的本地仓库（如果主题文件是存放于<i>myblog/themes/</i>下，还需删除主题文件夹中的<i>.git</i>和<i>.gitignore</i>文件），以后每次发布新文章或者修改博客配置，依次执行<code>git add -A</code>、<code>git commit -m &quot;提交说明&quot;</code>、<code>git push origin env</code>即可将新的环境文件推送到远程<i>env</i>分支，实现环境的同步管理，最后再执行<code>hexo g -d</code>将静态文件推送到远程主分支</li><li>现在迁移博客到其他电脑设备是很容易的，首先环境初始化（安装<i>git</i>、<i>nodejs</i>和<i>Hexo</i>），然后克隆远程<i>env</i>至本地：<code>git clone -b env git@github.com:用户名/用户名.github.io.git</code>，再根据<i>packge.json</i>安装依赖，最后<code>hexo g</code>、<code>hexo s</code>就能在本地重新打开博客了</li></ul></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境初始化&quot;&gt;&lt;a href=&quot;#环境初始化&quot; class=&quot;headerlink&quot; title=&quot;环境初始化&quot;&gt;&lt;/a&gt;环境初始化&lt;/h1&gt;&lt;p&gt;以&lt;i&gt;Windows&lt;/i&gt;环境为例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;i&gt;git&lt;/i&gt;&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    <category term="环境配置" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
